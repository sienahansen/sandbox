<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="customization_of_the_abstract_generation_flow">
  <title>Customization of the Abstract Generation Flow</title>
  <body>
    <p>Tasks that you otherwise cannot perform directly by using the available AG options can be
      done using an advanced methodology based on the concept of calling custom code—also called a
      hook—during the abstract generation flow. This section briefly describes the predefined hooks
      and how to customize them.</p>
    <p>AG provides predefined hooks, which are automatically called before and after running a flow
      step (Pin, Extract, or Abstract) (<xref
        href="#customization_of_the_abstract_generation_flow/Ref153178154"/>). There are therefore,
      two predefined hooks for every flow step.</p>
    <table colsep="1" frame="all" id="Ref153178154" rowsep="1">
      <title>Predefined hooks in AG</title>
      <tgroup cols="2">
        <colspec colname="col1" colnum="1" colwidth="0.7*"/>
        <colspec colname="col2" colnum="2" colwidth="1.3*"/>
        <thead>
          <row>
            <entry>Pre-defined hooks</entry>
            <entry>When called or run</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>PinsPreHook</entry>
            <entry>Called prior to running the Pins step.</entry>
          </row>
          <row>
            <entry>PinsPostHook</entry>
            <entry>Called after running the Pins step.</entry>
          </row>
          <row>
            <entry>ExtractPreHook</entry>
            <entry>Called prior to running the Extract step.</entry>
          </row>
          <row>
            <entry>ExtractPostHook</entry>
            <entry>Called after running the Extract step.</entry>
          </row>
          <row>
            <entry>AbstractPreHook</entry>
            <entry>Called prior to running the Abstract step.</entry>
          </row>
          <row>
            <entry>AbstractPostHook:</entry>
            <entry>Called after running the Abstract step.</entry>
          </row>
          <row>
            <entry>ExitHook</entry>
            <entry>Run even if AbstractPostHook is not specified, when the tool is closed.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>AbstractPostHook is used in this demonstration and accomplishes three things:</p>
    <ul>
      <li>Removes any unnecessary cell view properties from the abstract</li>
      <li>Adds a property so that the FIXEDMASK attribute is added in the LEF</li>
      <li>Converts via blockage to a pin for the via directly under a signal pin</li>
    </ul>
    <ol>
      <li>On the command line,
        type:<codeblock id="codeblock_xsw_5sd_mcc">more .abstractrc</codeblock></li>
      <li>Optionally, view the file ./.abstract/AbstractPostHook.il.</li>
    </ol>
    <p>The abstract view is stored in the OpenAccess database and is accessible through the Cadence
      Virtuoso* Library Manager. The abstract views are exported to LEF in Section <xref
        href="exporting_lef.dita#exporting_lef">4.9</xref>.</p>
    <p>An optional clean-up step is to delete the intermediate views <i>abstract.pin</i> and
        <i>abstract.ext</i> from the Library Manager: select <b>Edit &gt; Delete By View</b>.</p>
  </body>
</topic>