<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="Toc164238129">
      <title>Customization of the Abstract Generation
Flow</title>
      <body>
        <p>Tasks that you otherwise cannot perform directly by using the
available AG options can be done using an advanced methodology
based on the concept of calling custom code—also called a
hook—during the abstract generation flow. This section
briefly describes the predefined hooks and how to customize
them.</p>

        <p>AG provides predefined hooks, which are automatically called
before and after running a flow step (Pin, Extract, or Abstract)
(<xref href="#Toc164238129/Ref153178154">Table 15</xref>). There are therefore, two
predefined hooks for every flow step.</p>
        <table colsep="1" frame="all" id="Ref153178154" rowsep="1">
          <title>Table 15: Predefined hooks in AG</title>
          <tgroup cols="2">
            <colspec colname="col1" colnum="1" colwidth="0.7*"/>
            <colspec colname="col2" colnum="2" colwidth="1.3*"/>
            <thead>
              <row>
                <entry>Pre-defined hooks</entry>
                <entry>When called or run</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <ol>
                    <li>PinsPreHook</li>
                  </ol>
                </entry>
                <entry>
                  <ol>
                    <li>Called prior to running the Pins step.</li>
                  </ol>
                </entry>
              </row>
              <row>
                <entry>
                  <ol>
                    <li>PinsPostHook</li>
                  </ol>
                </entry>
                <entry>
                  <ol>
                    <li>Called after running the Pins step.</li>
                  </ol>
                </entry>
              </row>
              <row>
                <entry>
                  <ol>
                    <li>ExtractPreHook</li>
                  </ol>
                </entry>
                <entry>
                  <ol>
                    <li>Called prior to running the Extract step.</li>
                  </ol>
                </entry>
              </row>
              <row>
                <entry>
                  <ol>
                    <li>ExtractPostHook</li>
                  </ol>
                </entry>
                <entry>
                  <ol>
                    <li>Called after running the Extract step.</li>
                  </ol>
                </entry>
              </row>
              <row>
                <entry>
                  <ol>
                    <li>AbstractPreHook</li>
                  </ol>
                </entry>
                <entry>
                  <ol>
                    <li>Called prior to running the Abstract step.</li>
                  </ol>
                </entry>
              </row>
              <row>
                <entry>
                  <ol>
                    <li>AbstractPostHook:</li>
                  </ol>
                </entry>
                <entry>
                  <ol>
                    <li>Called after running the Abstract step.</li>
                  </ol>
                </entry>
              </row>
              <row>
                <entry>
                  <ol>
                    <li>ExitHook</li>
                  </ol>
                </entry>
                <entry>
                  <ol>
                    <li>Run even if AbstractPostHook is not specified, when the tool is
closed.</li>
                  </ol>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <p>AbstractPostHook is used in this demonstration and accomplishes
three things:</p>
        <ul>
          <li>Removes any unnecessary cell view properties from the
abstract</li>
          <li>Adds a property so that the FIXEDMASK attribute is added in the
LEF</li>
          <li>Converts via blockage to a pin for the via directly under a
signal pin</li>
        </ul>
        <ol>
          <li>On the command line, type:</li>
        </ol>
        <table colsep="1" frame="all" rowsep="1">
          <tgroup cols="1">
            <colspec colname="col1" colnum="1" colwidth="1*"/>
            <tbody>
              <row>
                <entry>
                  <ol>
                    <li>more .abstractrc</li>
                  </ol>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <ol>
          <li>Optionally, view the file ./.abstract/AbstractPostHook.il.</li>
        </ol>

        <p>The abstract view is stored in the OpenAccess database and is
accessible through the Cadence Virtuoso* Library Manager. The
abstract views are exported to LEF in Section <xref href="exporting_lef.dita#Ref153268924">4.9</xref>.</p>
        <p>An optional clean-up step is to delete the intermediate views
<i>abstract.pin</i> and <i>abstract.ext</i> from the Library
Manager: select <b>Edit &gt; Delete By View</b>.</p>
      </body>
    </topic>